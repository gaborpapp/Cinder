Import('env')

TARGET = '#' + env['APP_TARGET']

SOURCES = map(lambda s: (s[0] == '/') and s or ('#../src/' + s), env['APP_SOURCES'])

platform = env['PLATFORM']

if platform == 'darwin':
	if 'ICON' not in env:
		ICON = '../tools/TinderBox.app/Contents/Resources/CinderApp.icns'
	else:
		ICON = '#../resources/' + env['ICON']

INCLUDES = ['#../include']

INCLUDES += ['../include',
		'../boost',
		'../include/rapidxml',
		'../include/cinder/app',
		'../src/AntTweakBar']

if 'DEBUG' in env:
	DEBUG = env['DEBUG']
else:
	DEBUG = 0

if DEBUG:
	LIBS = ['cinder_d']
else:
	LIBS = ['cinder']

if platform == 'darwin':
	INCLUDES += ['../include/macosx/png',
			'../include/macosx/cairo']
	LIBPATH = ['../lib/macosx/']
else:
	LIBPATH = []

LIBPATH += ['.']

if platform == 'darwin':
	LIBS += [File(LIBPATH[0] + s) for s in Split('libboost_date_time.a libboost_system.a libboost_thread.a ' + \
			'libboost_filesystem.a libcairo.a libpixman-1.a libz.a libpng14.a')]
elif platform == 'posix':
	for lib in ['x11', 'gl', 'cairo', 'libcurl', 'zlib']:
		env.ParseConfig('pkg-config --cflags --libs %s' % (lib))
	# FIXME: no boost pkg-config
	LIBS += ['boost_date_time-mt', 'boost_system-mt', 'boost_thread-mt',
			'boost_filesystem-mt']
	# librt for glibc timer
	LIBS += ['rt']

CFLAGS = ' -fmessage-length=0 -pipe -Wno-trigraphs -Wreturn-type -Wunused-variable -ffast-math '
CCFLAGS = CFLAGS + ' -x c++ -fvisibility-inlines-hidden '

LINKFLAGS = '-dead_strip '

if platform == 'darwin':
	CCFLAGS += '-arch i386 -fpascal-strings -fasm-blocks -mmacosx-version-min=10.6 '
	LINKFLAGS += '-arch i386 -all_load'
elif platform == 'posix':
	CCFLAGS +='-pthread '

if DEBUG:
	CCFLAGS += '-ggdb2 -O0 '
else:
	CCFLAGS += '-g0 -O3 '

CPPPATH = ['/usr/include']
CPPPATH += INCLUDES

# FIXME: replace these with block SConscript files
# process cinder blocks
if 'BLOCKS' not in locals():
	BLOCKS = []
for block in BLOCKS:
	if block == 'kinect':
		CPPPATH += ['../blocks/Cinder-Kinect/include']
		if platform == 'darwin':
			LIBS += [File('../blocks/Cinder-Kinect/lib/macosx/libfreenect.a'),
					File('../blocks/Cinder-Kinect/lib/macosx/libusb-1.0.a')]
			env.Append(FRAMEWORKS = 'IOKit')

		SOURCES += ['../blocks/Cinder-Kinect/src/Kinect.cpp']

env.Append(CCFLAGS = Split(CCFLAGS))
env.Append(CPPPATH = CPPPATH)
env.Append(LIBPATH = LIBPATH)
env.Append(LIBS = LIBS)
env.Replace(LINKFLAGS = Split(LINKFLAGS))

if platform == 'darwin':
	env.Append(FRAMEWORKS = Split('Accelerate AudioToolbox AudioUnit CoreAudio ' + \
			'ApplicationServices QuickTime QTKit CoreVideo Carbon OpenGl Cocoa ' + \
			'AppKit CoreData Foundation CoreServices '))
	env.Append(FRAMEWORKPATH = '/Developer/SDKs/MacOSX10.6.sdk/System/Library/Frameworks/')

	# change compile flags for ObjC files
	CCFLAGS_OBJC = CFLAGS + ' -x objective-c++ -fobjc-call-cxx-cdtors -fvisibility-inlines-hidden -arch i386 -mmacosx-version-min=10.6 '
	for i in range(len(SOURCES)):
		if SOURCES[i].endswith('.mm') or SOURCES[i].endswith('.m'):
				SOURCES[i] = env.Object(SOURCES[i], CCFLAGS = CCFLAGS_OBJC)

# build the application
env.Program(source = SOURCES, target = TARGET)

# build the osx app
if platform == 'darwin':
	import sys, os
	from osxbundle import *
	TOOL_BUNDLE(env)

	if 'RESOURCES' not in env:
		RESOURCES = []
	else:
		# if a resource contains a regular expression call Glob
		resources = []
		abs_resources = Dir('#../resources/').abspath
		for res in env['RESOURCES']:
			if 1 in [c in res for c in '*?[]']:
				glob_resources = Glob('#../resources/' + res, strings = True)
				# convert to relative path
				resources += [os.path.relpath(f, abs_resources) for f in glob_resources]
			else:
				resources.append(res)
		RESOURCES = map(lambda s: (s[0] == '/') and s or [('#../resources/' + s), s], resources)

	if 'ASSETS' not in env:
		ASSETS = []
	else:
		# if an asset contains a regular expression call Glob
		assets = []
		abs_assets = Dir('#../assets/').abspath
		for asset in env['ASSETS']:
			if 1 in [c in asset for c in '*?[]']:
				glob_assets = Glob('#../assets/' + asset, strings = True)
				# convert to relative path
				assets += [os.path.relpath(f, abs_assets) for f in glob_assets]
			else:
				assets.append(asset)
		ASSETS = [['#../assets/' + s, 'assets/' + s] for s in assets]

	if 'PLIST' not in env:
		PLIST = '#../xcode/Info.plist',
	else:
		PLIST = '#' + env['PLIST']
		
	env.Alias('app', env.MakeBundle(TARGET + '.app',
		TARGET,
		'key',
		PLIST,
		resources = RESOURCES + ASSETS,
		typecode='APPL',
		icon_file = ICON,
		subst_dict = {'\${EXECUTABLE_NAME}': TARGET[1:],
						'\${PRODUCT_NAME}': TARGET[1:],
						'\${ICON_FILE}': basename(ICON)}))

	env.Clean(TARGET, TARGET + '.app')

# run
if platform == 'darwin':
	env.AlwaysBuild(env.Alias('run', [TARGET + '.app'], 'open %s' % env.Dir(TARGET + '.app').abspath))

