# scons file to build libcinder

import os
from os.path import basename

TARGET = 'cinder'

DEBUG = int(ARGUMENTS.get('DEBUG', '0'))
if DEBUG:
	TARGET += '_d'

env = Environment(ENV = {'PATH' : os.environ['PATH']})

platform = env['PLATFORM']

CINDERSRC = Split('Area.cpp AxisAlignedBox.cpp Base64.cpp BSpline.cpp ' + \
		'BSplineFit.cpp BandedMatrix.cpp Buffer.cpp Camera.cpp ' + \
		'Channel.cpp CinderAssert.cpp CinderMath.cpp Clipboard.cpp ConvexHull.cpp Color.cpp ' + \
		'DataSource.cpp DataTarget.cpp Exception.cpp Frustum.cpp ' + \
		'GeomIo.cpp ImageIo.cpp ImageSourceFileRadiance.cpp Json.cpp ' + \
		'Log.cpp Matrix.cpp MatrixStack.cpp ObjLoader.cpp ' + \
		'Path2d.cpp Perlin.cpp Plane.cpp PolyLine.cpp Rand.cpp Ray.cpp Rect.cpp ' + \
		'Serial.cpp Shape2d.cpp Signals.cpp Sphere.cpp Stream.cpp Surface.cpp System.cpp ' + \
		'Text.cpp Timer.cpp Triangulate.cpp TriMesh.cpp Url.cpp Xml.cpp ' + \
		'Capture.cpp Display.cpp Font.cpp ' + \
		'Timeline.cpp TimelineItem.cpp Tween.cpp ' + \
		'Unicode.cpp Utilities.cpp ')

if platform == 'darwin':
	CINDERSRC += Split('ImageTargetFileQuartz.cpp UrlImplCocoa.mm ' + \
				 'CaptureImplAvFoundation.mm ImageSourceFileQuartz.cpp')
elif platform == 'posix':
	CINDERSRC += ['UrlImplCurl.cpp']
elif platform == 'win32':
	env['ENV']['INCLUDE'] = os.environ['INCLUDE']
	env['ENV']['LIB'] = os.environ['LIB']
	CINDERSRC += Split('CaptureImplDirectShow.cpp ImageSourceFileWic.cpp ' + \
		'ImageSourcePng.cpp ImageTargetFileWic.cpp UrlImplWinInet.cpp ')

CINDERSRC = ['../src/cinder/' + s for s in CINDERSRC]

CINDERSRC_PARAMS = ['Params.cpp']
CINDERSRC_PARAMS = ['../src/cinder/params/' + s for s in CINDERSRC_PARAMS]

CINDERSRC_IP = Split('Blend.cpp EdgeDetect.cpp Fill.cpp Flip.cpp Grayscale.cpp ' + \
		'Hdr.cpp Premultiply.cpp Resize.cpp Threshold.cpp Trim.cpp')
CINDERSRC_IP = ['../src/cinder/ip/' + s for s in CINDERSRC_IP]

CINDERSRC_AUDIO = Split('ChannelRouterNode.cpp Context.cpp DelayNode.cpp ' + \
	'Device.cpp FileOggVorbis.cpp FilterNode.cpp GenNode.cpp InputNode.cpp ' + \
	'MonitorNode.cpp Node.cpp NodeMath.cpp OutputNode.cpp PanNode.cpp ' + \
	'Param.cpp SamplePlayerNode.cpp SampleRecorderNode.cpp Source.cpp ' + \
	'Target.cpp Utilities.cpp Voice.cpp WaveTable.cpp ')
if platform == 'darwin':
	CINDERSRC_AUDIO_COCOA = Split('CinderCoreAudio.cpp ContextAudioUnit.cpp ' + \
		'DeviceManagerCoreAudio.cpp FileCoreAudio.cpp ' )
	CINDERSRC_AUDIO_COCOA = ['cocoa/' + s for s in CINDERSRC_AUDIO_COCOA]
	CINDERSRC_AUDIO += CINDERSRC_AUDIO_COCOA
if platform == 'win32':
	CINDERSRC_AUDIO_MSW = Split('ContextWasapi.cpp ContextXAudio.cpp ' + \
			'DeviceManagerWasapi.cpp FileMediaFoundation.cpp MswUtil.cpp ')
	CINDERSRC_AUDIO_MSW = ['msw/' + s for s in CINDERSRC_AUDIO_MSW]
	CINDERSRC_AUDIO += CINDERSRC_AUDIO_MSW

CINDERSRC_AUDIO_DSP = Split('Biquad.cpp Converter.cpp ConverterR8brain.cpp Dsp.cpp ' + \
	'Fft.cpp ooura/fftsg.cpp ')
CINDERSRC_AUDIO_DSP = ['dsp/' + s for s in CINDERSRC_AUDIO_DSP]
CINDERSRC_AUDIO += CINDERSRC_AUDIO_DSP

CINDERSRC_AUDIO = ['../src/cinder/audio/' + s for s in CINDERSRC_AUDIO]

CINDERSRC_COCOA = Split('CinderCocoa.mm')
CINDERSRC_COCOA = ['../src/cinder/cocoa/' + s for s in CINDERSRC_COCOA]

CINDERSRC_JSON = ['jsoncpp.cpp']
CINDERSRC_JSON = ['../src/jsoncpp/' + s for s in CINDERSRC_JSON]

if platform == 'darwin':
	CINDERSRC_QTIME = Split('AvfUtils.mm AvfWriter.mm MovieWriter.cpp ' + \
		'QuickTimeGlImplAvf.cpp QuickTimeImplAvf.mm QuickTimeUtils.cpp')
	CINDERSRC_QTIME = ['../src/cinder/qtime/' + s for s in CINDERSRC_QTIME]

CINDERSRC_SVG = Split('Svg.cpp')
CINDERSRC_SVG = ['../src/cinder/svg/' + s for s in CINDERSRC_SVG]

CINDERSRC_GL = Split('Batch.cpp BufferObj.cpp BufferTexture.cpp ConstantConversions.cpp ' + \
	'Context.cpp Environment.cpp EnvironmentCore.cpp EnvironmentEs.cpp ' + \
	'Fbo.cpp GlslProg.cpp Pbo.cpp Query.cpp Shader.cpp ShaderPreprocessor.cpp Sync.cpp Texture.cpp ' + \
	'TextureFont.cpp TextureFormatParsers.cpp TransformFeedbackObj.cpp ' + \
	'TransformFeedbackObjImplHardware.cpp TransformFeedbackObjImplSoftware.cpp ' + \
	'Ubo.cpp Vao.cpp VaoImplCore.cpp VaoImplEs.cpp VaoImplSoftware.cpp Vbo.cpp ' + \
	'VboMesh.cpp draw.cpp scoped.cpp wrapper.cpp')
CINDERSRC_GL = ['../src/cinder/gl/' + s for s in CINDERSRC_GL]

CINDERSRC_APP = Split('AppBase.cpp KeyEvent.cpp ' + \
		'Platform.cpp Renderer.cpp RendererGl.cpp Window.cpp')
CINDERSRC_APP = ['../src/cinder/app/' + s for s in CINDERSRC_APP]
if platform == 'darwin':
	CINDERSRC_APP_COCOA = Split('AppCocoaView.mm AppImplMac.mm ' + \
			'AppMac.cpp CinderViewMac.mm PlatformCocoa.cpp ' + \
			'RendererImpl2dMacQuartz.mm RendererImplGlMac.mm')
	CINDERSRC_APP_COCOA = ['../src/cinder/app/cocoa/' + s for s in CINDERSRC_APP_COCOA]
	CINDERSRC_APP += CINDERSRC_APP_COCOA
elif platform == 'win32':
	CINDERSRC_APP_MSW += Split('AppImplMsw.cpp AppImplMswBasic.cpp ' + \
			'RendererImpl2dGdi.cpp RendererImplGlAngle.cpp ' + \
			'RendererImplGlMsw.cpp ')
	CINDERSRC_APP_MSW = ['../src/cinder/app/msw/' + s for s in CINDERSRC_APP_MSW]
	CINDERSRC_APP += CINDERSRC_APP_MSW

CINDERSRC_MSW = Split('CinderMsw.cpp CinderMswGdiPlus.cpp StackWalker.cpp')
CINDERSRC_MSW = ['../src/cinder/msw/' + s for s in CINDERSRC_MSW]

CINDERSRC_DX = Split('DDSTextureLoader.cpp dx.cpp DxLight.cpp ' + \
		'DxRenderTarget.cpp DxTexture.cpp DxTextureFont.cpp ' + \
		'DxVbo.cpp FontEnumerator.cpp HlslProg.cpp')
CINDERSRC_DX = ['../src/cinder/dx/' + s for s in CINDERSRC_DX]

ANTTWEAKBARSRC = Split('LoadOGL.cpp LoadOGLCore.cpp TwBar.cpp TwColors.cpp TwFonts.cpp ' + \
					'TwMgr.cpp TwOpenGL.cpp TwOpenGLCore.cpp TwPrecomp.cpp')
if platform == 'win32':
	ANTTWEAKBARSRC += ['TwDirect3D11.cpp']
ANTTWEAKBARSRC = ['../src/AntTweakBar/' + s for s in ANTTWEAKBARSRC]

LIBTESS2SRC = Split('bucketalloc.c dict.c geom.c mesh.c priorityq.c ' + \
		'sweep.c tess.c')
LIBTESS2SRC = ['../src/libtess2/' + s for s in LIBTESS2SRC]

GLLOADSRC = ['gl_load.c', 'gl_load_cpp.cpp']
if platform == 'win32':
	GLLOADSRC += ['wgl_load.c', 'wgl_load_cpp.cpp']
GLLOADSRC = ['../src/glload/' + s for s in GLLOADSRC]

LINEBREAKSRC = Split('linebreak.c linebreakdata.c linebreakdef.c')
LINEBREAKSRC = ['../src/linebreak/' + s for s in LINEBREAKSRC]

VIDEOINPUTSRC = ['videoInput.cpp']
VIDEOINPUTSRC = ['../src/videoInput/' + s for s in VIDEOINPUTSRC]

R8BRAINSRC = Split('../src/r8brain/r8bbase.cpp')

VORBISSRC = Split('analysis.c bitrate.c block.c codebook.c envelope.c ' + \
	'floor0.c floor1.c info.c lookup.c lpc.c lsp.c mapping0.c ' + \
	'mdct.c psy.c registry.c res0.c sharedbook.c smallft.c synthesis.c ' + \
	'vorbisenc.c vorbisfile.c window.c')
VORBISSRC = ['../src/oggvorbis/vorbis/' + s for s in VORBISSRC]
OGGSRC = Split('bitwise.c framing.c')
OGGSRC = ['../src/oggvorbis/ogg/' + s for s in OGGSRC]

CINDER_SOURCES = CINDERSRC + CINDERSRC_PARAMS + \
		CINDERSRC_IP + CINDERSRC_GL + ANTTWEAKBARSRC + CINDERSRC_JSON + \
		CINDERSRC_SVG + GLLOADSRC + LIBTESS2SRC + LINEBREAKSRC + CINDERSRC_APP + \
		VORBISSRC + OGGSRC + R8BRAINSRC + CINDERSRC_AUDIO

if platform == 'darwin':
	CINDER_SOURCES += CINDERSRC_COCOA + CINDERSRC_QTIME
elif platform == 'win32':
	CINDER_SOURCES += CINDERSRC_MSW + VIDEOINPUTSRC

INCLUDES = ['../include',
		'../boost',
		'../include/rapidxml',
		'../include/cinder/app',
		'../include/jsoncpp',
		'../include/oggvorbis',
		'../src/AntTweakBar',
		'../src/libtess2',
		'../src/linebreak',
		'../src/oggvorbis',
		'../src/oggvorbis/vorbis',
		'../src/r8brain']

if platform != 'win32':
	CFLAGS = ' -fmessage-length=0 -Wno-trigraphs ' + \
			' -Wno-missing-field-initializers -Wreturn-type ' + \
			' -Wno-missing-prototypes -Wformat -Wno-missing-braces -Wparentheses ' + \
			' -Wswitch -Wno-unused-function -Wno-unused-label ' + \
			' -Wno-unused-parameter -Wunused-variable -Wunused-value ' + \
			' -Wno-empty-body -Wno-uninitialized -Wno-unknown-pragmas -Wno-shadow ' + \
			' -Wno-four-char-constants -Wno-conversion -Wno-shorten-64-to-32 ' + \
			' -Wpointer-sign -Wno-newline-eof -fasm-blocks -ffast-math ' + \
			' -Wdeprecated-declarations -Wno-sign-conversion ' + \
			' -fstrict-aliasing '
else:
	INCLUDES += ['../include/msw/png', '../include/msw/zlib',
			'../include/msw', '../blocks/QuickTime/include/msw',
			'../src/DxShaders']
	CFLAGS = '/GS /analyze- /W3 /Zc:wchar_t /Zi /Gm- /Ox /Ob2 /fp:precise ' + \
			'/D "WIN32" /D "NDEBUG" /D "_LIB" /D "NOMINMAX" ' + \
			'/D "_WIN32_WINNT=0x0601" /D "_CRT_SECURE_NO_WARNINGS" ' + \
			'/D "_SCL_SECURE_NO_WARNINGS" /D "_UNICODE" /D "UNICODE" ' + \
			'/errorReport:prompt /WX- /Zc:forScope /FS /Gd /Oy- /Oi ' + \
			'/MT /Ot /EHsc /nologo /arch:SSE2 '
	CCFLAGS = CFLAGS
	CPPPATH = []

if platform != 'win32':
	LINKFLAGS = ' -dead_strip '
else:
	LINKFLAGS = ''
	ARFLAGS = '/NODEFAULTLIB /NOLOGO'
	ARFLAGS += ' "Ws2_32.lib" "wldap32.lib" "shlwapi.lib" "OpenGL32.lib" ' +\
			'"zlib.lib" "wmvcore.lib" "Strmiids.lib" "Msimg32.lib" '
	ARFLAGS += ' /LIBPATH:"..\\lib\\msw\\x86\\" '
	env.Append(ARFLAGS = ARFLAGS)

if platform == 'darwin':
	env['CC'] = 'clang'
	env['CXX'] = 'clang++'
	CFLAGS += ' -arch i386 -arch x86_64 -mmacosx-version-min=10.8 ' + \
		' -fpascal-strings '
	LINKFLAGS += ' -arch i386 -arch x86_64 -mmacosx-version-min=10.8 '

if platform != 'win32':
	if DEBUG:
		if platform == 'darwin':
			CFLAGS += '-g -O0 '
		else:
			CFLAGS += '-ggdb2 -O0 '
	else:
		CFLAGS += '-g0 -O3 '

	CCFLAGS = CFLAGS + ' -x c++ -fvisibility-inlines-hidden -std=c++11 ' + \
			' -stdlib=libc++ -Wno-non-virtual-dtor -Wno-overloaded-virtual ' + \
			' -Wno-exit-time-destructors -Wno-c++11-extensions -Winvalid-offsetof '

	CPPPATH = ['/usr/include']

CPPPATH += INCLUDES

env.Append(CPPPATH = CPPPATH)
env.Append(CCFLAGS = Split(CCFLAGS))
env.Append(LINKFLAGS = Split(LINKFLAGS))

if platform == 'darwin':
	CCFLAGS_OBJC = CFLAGS + ' -x objective-c++ -fvisibility-inlines-hidden ' + \
		'-std=c++11 -stdlib=libc++ -Wno-implicit-atomic-properties ' + \
		'-Wno-receiver-is-weak -Wno-non-virtual-dtor -Wno-overloaded-virtual ' + \
		'-Wno-exit-time-destructors -Wno-selector -Wno-strict-selector-match ' + \
		'-Wno-undeclared-selector -Wno-deprecated-implementations -Wno-arc-abi ' + \
		'-Wno-c++11-extensions -Wprotocol -Winvalid-offsetof ' + \
		'"-DIBOutlet=__attribute__((iboutlet))" ' + \
		'"-DIBOutletCollection(ClassName)=__attribute__((iboutletcollection(ClassName)))" ' + \
		'"-DIBAction=void)__attribute__((ibaction)" '

	env.Append(FRAMEWORKS = Split('AppKit ApplicationServices AudioUnit ' + \
		'AudioToolbox AVFoundation Cocoa CoreAudio CoreData CoreGraphics ' + \
		'CoreMedia CoreVideo Foundation OpenGl QTKit '))

	# change compile flags for C and ObjC files
	for i in range(len(CINDER_SOURCES)):
		if (CINDER_SOURCES[i].endswith('.mm') or
			basename(CINDER_SOURCES[i]) in ['App.cpp', 'Capture.cpp', 'Log.cpp',
				'Utilities.cpp', 'AppBasic.cpp', 'Display.cpp', 'Font.cpp',
				'Renderer.cpp', 'RendererGl.cpp', 'TwMgr.cpp', 'TwPrecomp.cpp',
				'LoadOGL.cpp', 'LoadOGLCore.cpp', 'TwFonts.cpp',
				'TwColors.cpp', 'TwOpenGL.cpp', 'TwOpenGLCore.cpp', 'TwBar.cpp', 'System.cpp',
				'ImageSourceFileQuartz.cpp', 'MovieWriter.cpp', 'Clipboard.cpp', 'Window.cpp',
				'Environment.cpp', 'PlatformCocoa.cpp', 'AppMac.cpp']):
				CINDER_SOURCES[i] = env.Object(CINDER_SOURCES[i], CCFLAGS = CCFLAGS_OBJC)
		elif CINDER_SOURCES[i].endswith('.c'):
				CINDER_SOURCES[i] = env.Object(CINDER_SOURCES[i], CCFLAGS = CFLAGS)
		else:
				CINDER_SOURCES[i] = env.Object(CINDER_SOURCES[i], CCFLAGS = CCFLAGS)

def CheckPKGConfig(context, version):
	context.Message( 'Checking for pkg-config... ' )
	ret = context.TryAction('pkg-config --atleast-pkgconfig-version=%s' % version)[0]
	context.Result(ret)
	return ret

def CheckPKG(context, name):
	context.Message('Checking for %s... ' % name)
	ret = context.TryAction("pkg-config --exists '%s'" % name)[0]
	context.Result(ret)
	return ret

# configure on posix with pkg-config
if (not GetOption('clean')) and (platform == 'posix'):
	conf = env.Configure(custom_tests = { 'CheckPKGConfig' : CheckPKGConfig,
											'CheckPKG' : CheckPKG })
	if not conf.CheckPKGConfig('0.15'):
		print 'ERROR: pkg-config not found.'
		Exit(1)

	LIBS = ['x11', 'gl', 'cairo', 'libcurl', 'zlib'] # TODO: no pkg-config boost

	for lib in LIBS:
		if not conf.CheckPKG(lib):
			print "ERROR: '%s' must be installed!" % (lib)
			Exit(1)
		else:
			env.ParseConfig('pkg-config --cflags --libs %s' % (lib))

	env = conf.Finish()

# build the library
if platform == 'darwin':
	TARGET32 = TARGET + '-i386'
	TARGET64 = TARGET + '-x86_64'
	# merge all objects to a master one, which is how XCode does it. scons uses ar/ranlib
	# while XCode makes the lib with libtool, which can also cause different behaviour.
	env['BUILDERS']['ObjectMerge32'] = Builder(action = 'ld -r -arch i386 $SOURCES -o $TARGET')
	master_obj32 = env.ObjectMerge32(target = 'cinder-master-i386.o', source = CINDER_SOURCES)
	static_lib32 = env.StaticLibrary(source = master_obj32, target = TARGET32)
	env['BUILDERS']['ObjectMerge64'] = Builder(action = 'ld -r -arch x86_64 $SOURCES -o $TARGET')
	master_obj64 = env.ObjectMerge64(target = 'cinder-master-x86_64.o', source = CINDER_SOURCES)
	static_lib64 = env.StaticLibrary(source = master_obj64, target = TARGET64)
	env['BUILDERS']['UniversalStaticLibrary'] = Builder(action =
			'lipo -create -arch i386 lib' + TARGET32 + '.a -arch x86_64 lib' + TARGET64 + '.a ' \
				' -output $TARGET')
	env.UniversalStaticLibrary(target = 'lib' + TARGET + '.a', source = [static_lib32, static_lib64])
else:
	env.StaticLibrary(source = CINDER_SOURCES, target = TARGET)

if platform == 'win32':
	env.Clean(TARGET, 'vc120.pdb')
